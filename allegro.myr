extern const get_allegro_version : ( -> uint32_t)
extern const run_main : (argc: int, argv: char # #, arg2: (arg0: int, arg1: char # # -> int) -> int)
type TIMEOUT = struct
;;
extern const get_time : ( -> double)
extern const rest : (seconds: double -> void)
extern const init_timeout : (timeout: TIMEOUT #, seconds: double -> void)
type COLOR = struct
;;
type PIXEL_FORMAT = union
	`PIXEL_FORMAT_ANY
	`PIXEL_FORMAT_ANY_NO_ALPHA
	`PIXEL_FORMAT_ANY_WITH_ALPHA
	`PIXEL_FORMAT_ANY_15_NO_ALPHA
	`PIXEL_FORMAT_ANY_16_NO_ALPHA
	`PIXEL_FORMAT_ANY_16_WITH_ALPHA
	`PIXEL_FORMAT_ANY_24_NO_ALPHA
	`PIXEL_FORMAT_ANY_32_NO_ALPHA
	`PIXEL_FORMAT_ANY_32_WITH_ALPHA
	`PIXEL_FORMAT_ARGB_8888
	`PIXEL_FORMAT_RGBA_8888
	`PIXEL_FORMAT_ARGB_4444
	`PIXEL_FORMAT_RGB_888
	`PIXEL_FORMAT_RGB_565
	`PIXEL_FORMAT_RGB_555
	`PIXEL_FORMAT_RGBA_5551
	`PIXEL_FORMAT_ARGB_1555
	`PIXEL_FORMAT_ABGR_8888
	`PIXEL_FORMAT_XBGR_8888
	`PIXEL_FORMAT_BGR_888
	`PIXEL_FORMAT_BGR_565
	`PIXEL_FORMAT_BGR_555
	`PIXEL_FORMAT_RGBX_8888
	`PIXEL_FORMAT_XRGB_8888
	`PIXEL_FORMAT_ABGR_F32
	`PIXEL_FORMAT_ABGR_8888_LE
	`PIXEL_FORMAT_RGBA_4444
	`PIXEL_FORMAT_SINGLE_CHANNEL_8
	`PIXEL_FORMAT_COMPRESSED_RGBA_DXT1
	`PIXEL_FORMAT_COMPRESSED_RGBA_DXT3
	`PIXEL_FORMAT_COMPRESSED_RGBA_DXT5
	`NUM_PIXEL_FORMATS
;;
extern const map_rgb : (r: byte, g: byte, b: byte -> COLOR)
extern const map_rgba : (r: byte, g: byte, b: byte, a: byte -> COLOR)
extern const map_rgb_f : (r: float, g: float, b: float -> COLOR)
extern const map_rgba_f : (r: float, g: float, b: float, a: float -> COLOR)
extern const premul_rgba : (r: byte, g: byte, b: byte, a: byte -> COLOR)
extern const premul_rgba_f : (r: float, g: float, b: float, a: float -> COLOR)
extern const unmap_rgb : (color: COLOR, r: byte #, g: byte #, b: byte # -> void)
extern const unmap_rgba : (color: COLOR, r: byte #, g: byte #, b: byte #, a: byte # -> void)
extern const unmap_rgb_f : (color: COLOR, r: float #, g: float #, b: float # -> void)
extern const unmap_rgba_f : (color: COLOR, r: float #, g: float #, b: float #, a: float # -> void)
extern const get_pixel_size : (format: int -> int)
extern const get_pixel_format_bits : (format: int -> int)
extern const get_pixel_block_size : (format: int -> int)
extern const get_pixel_block_width : (format: int -> int)
extern const get_pixel_block_height : (format: int -> int)
type BITMAP = struct
;;
const MEMORY_BITMAP = 1
const _KEEP_BITMAP_FORMAT = 2
const FORCE_LOCKING = 4
const NO_PRESERVE_TEXTURE = 8
const _ALPHA_TEST = 16
const _INTERNAL_OPENGL = 32
const MIN_LINEAR = 64
const MAG_LINEAR = 128
const MIPMAP = 256
const _NO_PREMULTIPLIED_ALPHA = 512
const VIDEO_BITMAP = 1024
const CONVERT_BITMAP = 4096
extern const set_new_bitmap_format : (format: int -> void)
extern const set_new_bitmap_flags : (flags: int -> void)
extern const get_new_bitmap_format : ( -> int)
extern const get_new_bitmap_flags : ( -> int)
extern const add_new_bitmap_flag : (flag: int -> void)
extern const get_bitmap_width : (bitmap: BITMAP # -> int)
extern const get_bitmap_height : (bitmap: BITMAP # -> int)
extern const get_bitmap_format : (bitmap: BITMAP # -> int)
extern const get_bitmap_flags : (bitmap: BITMAP # -> int)
extern const create_bitmap : (w: int, h: int -> BITMAP #)
extern const destroy_bitmap : (bitmap: BITMAP # -> void)
extern const put_pixel : (x: int, y: int, color: COLOR -> void)
extern const put_blended_pixel : (x: int, y: int, color: COLOR -> void)
extern const get_pixel : (bitmap: BITMAP #, x: int, y: int -> COLOR)
extern const convert_mask_to_alpha : (bitmap: BITMAP #, mask_color: COLOR -> void)
extern const set_clipping_rectangle : (x: int, y: int, width: int, height: int -> void)
extern const reset_clipping_rectangle : ( -> void)
extern const get_clipping_rectangle : (x: int #, y: int #, w: int #, h: int # -> void)
extern const create_sub_bitmap : (parent: BITMAP #, x: int, y: int, w: int, h: int -> BITMAP #)
extern const is_sub_bitmap : (bitmap: BITMAP # -> int)
extern const get_parent_bitmap : (bitmap: BITMAP # -> BITMAP #)
extern const get_bitmap_x : (bitmap: BITMAP # -> int)
extern const get_bitmap_y : (bitmap: BITMAP # -> int)
extern const reparent_bitmap : (bitmap: BITMAP #, parent: BITMAP #, x: int, y: int, w: int, h: int -> void)
extern const clone_bitmap : (bitmap: BITMAP # -> BITMAP #)
extern const convert_bitmap : (bitmap: BITMAP # -> void)
extern const convert_memory_bitmaps : ( -> void)
const FLIP_HORIZONTAL = 1
const FLIP_VERTICAL = 2
extern const draw_bitmap : (bitmap: BITMAP #, dx: float, dy: float, flags: int -> void)
extern const draw_bitmap_region : (bitmap: BITMAP #, sx: float, sy: float, sw: float, sh: float, dx: float, dy: float, flags: int -> void)
extern const draw_scaled_bitmap : (bitmap: BITMAP #, sx: float, sy: float, sw: float, sh: float, dx: float, dy: float, dw: float, dh: float, flags: int -> void)
extern const draw_rotated_bitmap : (bitmap: BITMAP #, cx: float, cy: float, dx: float, dy: float, angle: float, flags: int -> void)
extern const draw_scaled_rotated_bitmap : (bitmap: BITMAP #, cx: float, cy: float, dx: float, dy: float, xscale: float, yscale: float, angle: float, flags: int -> void)
extern const draw_tinted_bitmap : (bitmap: BITMAP #, tint: COLOR, dx: float, dy: float, flags: int -> void)
extern const draw_tinted_bitmap_region : (bitmap: BITMAP #, tint: COLOR, sx: float, sy: float, sw: float, sh: float, dx: float, dy: float, flags: int -> void)
extern const draw_tinted_scaled_bitmap : (bitmap: BITMAP #, tint: COLOR, sx: float, sy: float, sw: float, sh: float, dx: float, dy: float, dw: float, dh: float, flags: int -> void)
extern const draw_tinted_rotated_bitmap : (bitmap: BITMAP #, tint: COLOR, cx: float, cy: float, dx: float, dy: float, angle: float, flags: int -> void)
extern const draw_tinted_scaled_rotated_bitmap : (bitmap: BITMAP #, tint: COLOR, cx: float, cy: float, dx: float, dy: float, xscale: float, yscale: float, angle: float, flags: int -> void)
extern const draw_tinted_scaled_rotated_bitmap_region : (bitmap: BITMAP #, sx: float, sy: float, sw: float, sh: float, tint: COLOR, cx: float, cy: float, dx: float, dy: float, xscale: float, yscale: float, angle: float, flags: int -> void)
type USTR = struct
;;
type USTR_INFO = struct
;;
extern const ustr_new : (s: char # -> USTR #)
extern const ustr_new_from_buffer : (s: char #, size: int -> USTR #)
extern const ustr_newf : (fmt: char # -> USTR #)
extern const ustr_free : (us: USTR # -> void)
extern const cstr : (us: ALLEGRO_USTR # -> char #)
extern const ustr_to_buffer : (us: ALLEGRO_USTR #, buffer: char #, size: int -> void)
extern const cstr_dup : (us: ALLEGRO_USTR # -> char #)
extern const ustr_dup : (us: ALLEGRO_USTR # -> USTR #)
extern const ustr_dup_substr : (us: ALLEGRO_USTR #, start_pos: int, end_pos: int -> USTR #)
extern const ustr_empty_string : ( -> ALLEGRO_USTR #)
extern const ref_cstr : (info: USTR_INFO #, s: char # -> ALLEGRO_USTR #)
extern const ref_buffer : (info: USTR_INFO #, s: char #, size: int -> ALLEGRO_USTR #)
extern const ref_ustr : (info: USTR_INFO #, us: ALLEGRO_USTR #, start_pos: int, end_pos: int -> ALLEGRO_USTR #)
extern const ustr_size : (us: ALLEGRO_USTR # -> int)
extern const ustr_length : (us: ALLEGRO_USTR # -> int)
extern const ustr_offset : (us: ALLEGRO_USTR #, index: int -> int)
extern const ustr_next : (us: ALLEGRO_USTR #, pos: int # -> int)
extern const ustr_prev : (us: ALLEGRO_USTR #, pos: int # -> int)
extern const ustr_get : (us: ALLEGRO_USTR #, pos: int -> int32_t)
extern const ustr_get_next : (us: ALLEGRO_USTR #, pos: int # -> int32_t)
extern const ustr_prev_get : (us: ALLEGRO_USTR #, pos: int # -> int32_t)
extern const ustr_insert : (us1: USTR #, pos: int, us2: ALLEGRO_USTR # -> int)
extern const ustr_insert_cstr : (us: USTR #, pos: int, us2: char # -> int)
extern const ustr_insert_chr : (us: USTR #, pos: int, c: int32_t -> int)
extern const ustr_append : (us1: USTR #, us2: ALLEGRO_USTR # -> int)
extern const ustr_append_cstr : (us: USTR #, s: char # -> int)
extern const ustr_append_chr : (us: USTR #, c: int32_t -> int)
extern const ustr_appendf : (us: USTR #, fmt: char # -> int)
extern const ustr_vappendf : (us: USTR #, fmt: char #, ap: int -> int)
extern const ustr_remove_chr : (us: USTR #, pos: int -> int)
extern const ustr_remove_range : (us: USTR #, start_pos: int, end_pos: int -> int)
extern const ustr_truncate : (us: USTR #, start_pos: int -> int)
extern const ustr_ltrim_ws : (us: USTR # -> int)
extern const ustr_rtrim_ws : (us: USTR # -> int)
extern const ustr_trim_ws : (us: USTR # -> int)
extern const ustr_assign : (us1: USTR #, us2: ALLEGRO_USTR # -> int)
extern const ustr_assign_substr : (us1: USTR #, us2: ALLEGRO_USTR #, start_pos: int, end_pos: int -> int)
extern const ustr_assign_cstr : (us1: USTR #, s: char # -> int)
extern const ustr_set_chr : (us: USTR #, pos: int, c: int32_t -> int)
extern const ustr_replace_range : (us1: USTR #, start_pos1: int, end_pos1: int, us2: ALLEGRO_USTR # -> int)
extern const ustr_find_chr : (us: ALLEGRO_USTR #, start_pos: int, c: int32_t -> int)
extern const ustr_rfind_chr : (us: ALLEGRO_USTR #, start_pos: int, c: int32_t -> int)
extern const ustr_find_set : (us: ALLEGRO_USTR #, start_pos: int, accept: ALLEGRO_USTR # -> int)
extern const ustr_find_set_cstr : (us: ALLEGRO_USTR #, start_pos: int, accept: char # -> int)
extern const ustr_find_cset : (us: ALLEGRO_USTR #, start_pos: int, reject: ALLEGRO_USTR # -> int)
extern const ustr_find_cset_cstr : (us: ALLEGRO_USTR #, start_pos: int, reject: char # -> int)
extern const ustr_find_str : (haystack: ALLEGRO_USTR #, start_pos: int, needle: ALLEGRO_USTR # -> int)
extern const ustr_find_cstr : (haystack: ALLEGRO_USTR #, start_pos: int, needle: char # -> int)
extern const ustr_rfind_str : (haystack: ALLEGRO_USTR #, start_pos: int, needle: ALLEGRO_USTR # -> int)
extern const ustr_rfind_cstr : (haystack: ALLEGRO_USTR #, start_pos: int, needle: char # -> int)
extern const ustr_find_replace : (us: USTR #, start_pos: int, find: ALLEGRO_USTR #, replace: ALLEGRO_USTR # -> int)
extern const ustr_find_replace_cstr : (us: USTR #, start_pos: int, find: char #, replace: char # -> int)
extern const ustr_equal : (us1: ALLEGRO_USTR #, us2: ALLEGRO_USTR # -> int)
extern const ustr_compare : (u: ALLEGRO_USTR #, v: ALLEGRO_USTR # -> int)
extern const ustr_ncompare : (us1: ALLEGRO_USTR #, us2: ALLEGRO_USTR #, n: int -> int)
extern const ustr_has_prefix : (u: ALLEGRO_USTR #, v: ALLEGRO_USTR # -> int)
extern const ustr_has_prefix_cstr : (u: ALLEGRO_USTR #, s: char # -> int)
extern const ustr_has_suffix : (u: ALLEGRO_USTR #, v: ALLEGRO_USTR # -> int)
extern const ustr_has_suffix_cstr : (us1: ALLEGRO_USTR #, s: char # -> int)
extern const utf8_width : (c: int32_t -> int)
extern const utf8_encode : (s: char[:], c: int32_t -> int)
extern const ustr_new_from_utf16 : (s: uint16_t # -> USTR #)
extern const ustr_size_utf16 : (us: ALLEGRO_USTR # -> int)
extern const ustr_encode_utf16 : (us: ALLEGRO_USTR #, s: uint16_t #, n: int -> int)
extern const utf16_width : (c: int -> int)
extern const utf16_encode : (s: uint16_t[:], c: int32_t -> int)
type PATH = struct
;;
extern const create_path : (str: char # -> PATH #)
extern const create_path_for_directory : (str: char # -> PATH #)
extern const clone_path : (path: ALLEGRO_PATH # -> PATH #)
extern const get_path_num_components : (path: ALLEGRO_PATH # -> int)
extern const get_path_component : (path: ALLEGRO_PATH #, i: int -> char #)
extern const replace_path_component : (path: PATH #, i: int, s: char # -> void)
extern const remove_path_component : (path: PATH #, i: int -> void)
extern const insert_path_component : (path: PATH #, i: int, s: char # -> void)
extern const get_path_tail : (path: ALLEGRO_PATH # -> char #)
extern const drop_path_tail : (path: PATH # -> void)
extern const append_path_component : (path: PATH #, s: char # -> void)
extern const join_paths : (path: PATH #, tail: ALLEGRO_PATH # -> int)
extern const rebase_path : (head: ALLEGRO_PATH #, tail: PATH # -> int)
extern const path_cstr : (path: ALLEGRO_PATH #, delim: char -> char #)
extern const path_ustr : (path: ALLEGRO_PATH #, delim: char -> ALLEGRO_USTR #)
extern const destroy_path : (path: PATH # -> void)
extern const set_path_drive : (path: PATH #, drive: char # -> void)
extern const get_path_drive : (path: ALLEGRO_PATH # -> char #)
extern const set_path_filename : (path: PATH #, filename: char # -> void)
extern const get_path_filename : (path: ALLEGRO_PATH # -> char #)
extern const get_path_extension : (path: ALLEGRO_PATH # -> char #)
extern const set_path_extension : (path: PATH #, extension: char # -> int)
extern const get_path_basename : (path: ALLEGRO_PATH # -> char #)
extern const make_path_canonical : (path: PATH # -> int)
type FILE = struct
;;
type FILE_INTERFACE = struct
;;
type SEEK = union
	`SEEK_SET
	`SEEK_CUR
	`SEEK_END
;;
extern const fopen : (path: char #, mode: char # -> FILE #)
extern const fopen_interface : (vt: ALLEGRO_FILE_INTERFACE #, path: char #, mode: char # -> FILE #)
extern const create_file_handle : (vt: ALLEGRO_FILE_INTERFACE #, userdata: void # -> FILE #)
extern const fclose : (f: FILE # -> int)
extern const fread : (f: FILE #, ptr: void #, size: int -> int)
extern const fwrite : (f: FILE #, ptr: void #, size: int -> int)
extern const fflush : (f: FILE # -> int)
extern const ftell : (f: FILE # -> int64_t)
extern const fseek : (f: FILE #, offset: int64_t, whence: int -> int)
extern const feof : (f: FILE # -> int)
extern const ferror : (f: FILE # -> int)
extern const ferrmsg : (f: FILE # -> char #)
extern const fclearerr : (f: FILE # -> void)
extern const fungetc : (f: FILE #, c: int -> int)
extern const fsize : (f: FILE # -> int64_t)
extern const fgetc : (f: FILE # -> int)
extern const fputc : (f: FILE #, c: int -> int)
extern const fread16le : (f: FILE # -> int16_t)
extern const fread16be : (f: FILE # -> int16_t)
extern const fwrite16le : (f: FILE #, w: int16_t -> int)
extern const fwrite16be : (f: FILE #, w: int16_t -> int)
extern const fread32le : (f: FILE # -> int32_t)
extern const fread32be : (f: FILE # -> int32_t)
extern const fwrite32le : (f: FILE #, l: int32_t -> int)
extern const fwrite32be : (f: FILE #, l: int32_t -> int)
extern const fgets : (f: FILE #, p: char #, max: int -> char #)
extern const fget_ustr : (f: FILE # -> USTR #)
extern const fputs : (f: FILE #, p: char # -> int)
extern const fprintf : (f: FILE #, format: char # -> int)
extern const vfprintf : (f: FILE #, format: char #, args: int -> int)
extern const fopen_fd : (fd: int, mode: char # -> FILE #)
extern const make_temp_file : (tmpl: char #, ret_path: PATH # # -> FILE #)
extern const fopen_slice : (fp: FILE #, initial_size: int, mode: char # -> FILE #)
extern const get_new_file_interface : ( -> ALLEGRO_FILE_INTERFACE #)
extern const set_new_file_interface : (file_interface: ALLEGRO_FILE_INTERFACE # -> void)
extern const set_standard_file_interface : ( -> void)
extern const get_file_userdata : (f: FILE # -> void #)
const KEEP_BITMAP_FORMAT = 2
const NO_PREMULTIPLIED_ALPHA = 512
const KEEP_INDEX = 2048
type IIO_LOADER_FUNCTION = (filename: char #, flags: int -> BITMAP #)
type IIO_FS_LOADER_FUNCTION = (fp: FILE #, flags: int -> BITMAP #)
type bool = int (int *)
type IIO_FS_SAVER_FUNCTION = ( -> int)
type IIO_IDENTIFIER_FUNCTION = ( -> int)
extern const register_bitmap_loader : (ext: char #, loader: IIO_LOADER_FUNCTION -> int)
extern const register_bitmap_saver : (ext: char #, saver: int -> int)
extern const register_bitmap_loader_f : (ext: char #, fs_loader: IIO_FS_LOADER_FUNCTION -> int)
extern const register_bitmap_saver_f : (ext: char #, fs_saver: IIO_FS_SAVER_FUNCTION -> int)
extern const register_bitmap_identifier : (ext: char #, identifier: IIO_IDENTIFIER_FUNCTION -> int)
extern const load_bitmap : (filename: char # -> BITMAP #)
extern const load_bitmap_flags : (filename: char #, flags: int -> BITMAP #)
extern const load_bitmap_f : (fp: FILE #, ident: char # -> BITMAP #)
extern const load_bitmap_flags_f : (fp: FILE #, ident: char #, flags: int -> BITMAP #)
extern const save_bitmap : (filename: char #, bitmap: BITMAP # -> int)
extern const save_bitmap_f : (fp: FILE #, ident: char #, bitmap: BITMAP # -> int)
extern const identify_bitmap_f : (fp: FILE # -> char #)
extern const identify_bitmap : (filename: char # -> char #)
const LOCK_READWRITE = 0
const LOCK_READONLY = 1
const LOCK_WRITEONLY = 2
type LOCKED_REGION = struct
;;
extern const lock_bitmap : (bitmap: BITMAP #, format: int, flags: int -> LOCKED_REGION #)
extern const lock_bitmap_region : (bitmap: BITMAP #, x: int, y: int, width: int, height: int, format: int, flags: int -> LOCKED_REGION #)
extern const lock_bitmap_blocked : (bitmap: BITMAP #, flags: int -> LOCKED_REGION #)
extern const lock_bitmap_region_blocked : (bitmap: BITMAP #, x_block: int, y_block: int, width_block: int, height_block: int, flags: int -> LOCKED_REGION #)
extern const unlock_bitmap : (bitmap: BITMAP # -> void)
extern const is_bitmap_locked : (bitmap: BITMAP # -> int)
type BLEND_MODE = union
	`ZERO
	`ONE
	`ALPHA
	`INVERSE_ALPHA
	`SRC_COLOR
	`DEST_COLOR
	`INVERSE_SRC_COLOR
	`INVERSE_DEST_COLOR
	`CONST_COLOR
	`INVERSE_CONST_COLOR
	`NUM_BLEND_MODES
;;
type BLEND_OPERATIONS = union
	`ADD
	`SRC_MINUS_DEST
	`DEST_MINUS_SRC
	`NUM_BLEND_OPERATIONS
;;
extern const set_blender : (op: int, source: int, dest: int -> void)
extern const set_blend_color : (color: COLOR -> void)
extern const get_blender : (op: int #, source: int #, dest: int # -> void)
extern const get_blend_color : ( -> COLOR)
extern const set_separate_blender : (op: int, source: int, dest: int, alpha_op: int, alpha_source: int, alpha_dest: int -> void)
extern const get_separate_blender : (op: int #, source: int #, dest: int #, alpha_op: int #, alpha_src: int #, alpha_dest: int # -> void)
type EVENT_TYPE = uint
const EVENT_JOYSTICK_AXIS = 1
const EVENT_JOYSTICK_BUTTON_DOWN = 2
const EVENT_JOYSTICK_BUTTON_UP = 3
const EVENT_JOYSTICK_CONFIGURATION = 4
const EVENT_KEY_DOWN = 10
const EVENT_KEY_CHAR = 11
const EVENT_KEY_UP = 12
const EVENT_MOUSE_AXES = 20
const EVENT_MOUSE_BUTTON_DOWN = 21
const EVENT_MOUSE_BUTTON_UP = 22
const EVENT_MOUSE_ENTER_DISPLAY = 23
const EVENT_MOUSE_LEAVE_DISPLAY = 24
const EVENT_MOUSE_WARPED = 25
const EVENT_TIMER = 30
const EVENT_DISPLAY_EXPOSE = 40
const EVENT_DISPLAY_RESIZE = 41
const EVENT_DISPLAY_CLOSE = 42
const EVENT_DISPLAY_LOST = 43
const EVENT_DISPLAY_FOUND = 44
const EVENT_DISPLAY_SWITCH_IN = 45
const EVENT_DISPLAY_SWITCH_OUT = 46
const EVENT_DISPLAY_ORIENTATION = 47
const EVENT_DISPLAY_HALT_DRAWING = 48
const EVENT_DISPLAY_RESUME_DRAWING = 49
const EVENT_TOUCH_BEGIN = 50
const EVENT_TOUCH_END = 51
const EVENT_TOUCH_MOVE = 52
const EVENT_TOUCH_CANCEL = 53
const EVENT_DISPLAY_CONNECTED = 60
const EVENT_DISPLAY_DISCONNECTED = 61
type EVENT_SOURCE = struct
;;
type ANY_EVENT = struct
;;
type DISPLAY_EVENT = struct
;;
type JOYSTICK_EVENT = struct
;;
type KEYBOARD_EVENT = struct
;;
type MOUSE_EVENT = struct
;;
type TIMER_EVENT = struct
;;
type TOUCH_EVENT = struct
;;
type USER_EVENT = struct
;;
type EVENT = struct
;;
type EVENT = union
	`type EVENT_TYPE
	`any ANY_EVENT
	`display DISPLAY_EVENT
	`joystick JOYSTICK_EVENT
	`keyboard KEYBOARD_EVENT
	`mouse MOUSE_EVENT
	`timer TIMER_EVENT
	`touch TOUCH_EVENT
	`user USER_EVENT
;;
extern const init_user_event_source : (arg0: EVENT_SOURCE # -> void)
extern const destroy_user_event_source : (arg0: EVENT_SOURCE # -> void)
extern const emit_user_event : (arg0: EVENT_SOURCE #, arg1: EVENT #, dtor: (arg0: USER_EVENT # -> void) -> int)
extern const unref_user_event : (arg0: USER_EVENT # -> void)
extern const set_event_source_data : (arg0: EVENT_SOURCE #, data: intptr_t -> void)
extern const get_event_source_data : (arg0: ALLEGRO_EVENT_SOURCE # -> intptr_t)
type EVENT_QUEUE = struct
;;
extern const create_event_queue : ( -> EVENT_QUEUE #)
extern const destroy_event_queue : (arg0: EVENT_QUEUE # -> void)
extern const is_event_source_registered : (arg0: EVENT_QUEUE #, arg1: EVENT_SOURCE # -> int)
extern const register_event_source : (arg0: EVENT_QUEUE #, arg1: EVENT_SOURCE # -> void)
extern const unregister_event_source : (arg0: EVENT_QUEUE #, arg1: EVENT_SOURCE # -> void)
extern const pause_event_queue : (arg0: EVENT_QUEUE #, arg1: bool -> void)
extern const is_event_queue_paused : (arg0: ALLEGRO_EVENT_QUEUE # -> int)
extern const is_event_queue_empty : (arg0: EVENT_QUEUE # -> int)
extern const get_next_event : (arg0: EVENT_QUEUE #, ret_event: EVENT # -> int)
extern const peek_next_event : (arg0: EVENT_QUEUE #, ret_event: EVENT # -> int)
extern const drop_next_event : (arg0: EVENT_QUEUE # -> int)
extern const flush_event_queue : (arg0: EVENT_QUEUE # -> void)
extern const wait_for_event : (arg0: EVENT_QUEUE #, ret_event: EVENT # -> void)
extern const wait_for_event_timed : (arg0: EVENT_QUEUE #, ret_event: EVENT #, secs: float -> int)
extern const wait_for_event_until : (queue: EVENT_QUEUE #, ret_event: EVENT #, timeout: TIMEOUT # -> int)
const WINDOWED = 1
const FULLSCREEN = 2
const OPENGL = 4
const DIRECT3D_INTERNAL = 8
const RESIZABLE = 16
const FRAMELESS = 32
const NOFRAME = 32
const GENERATE_EXPOSE_EVENTS = 64
const OPENGL_3_0 = 128
const OPENGL_FORWARD_COMPATIBLE = 256
const FULLSCREEN_WINDOW = 512
const MINIMIZED = 1024
const PROGRAMMABLE_PIPELINE = 2048
const GTK_TOPLEVEL_INTERNAL = 4096
const MAXIMIZED = 8192
const OPENGL_ES_PROFILE = 16384
type DISPLAY_OPTIONS = union
	`RED_SIZE
	`GREEN_SIZE
	`BLUE_SIZE
	`ALPHA_SIZE
	`RED_SHIFT
	`GREEN_SHIFT
	`BLUE_SHIFT
	`ALPHA_SHIFT
	`ACC_RED_SIZE
	`ACC_GREEN_SIZE
	`ACC_BLUE_SIZE
	`ACC_ALPHA_SIZE
	`STEREO
	`AUX_BUFFERS
	`COLOR_SIZE
	`DEPTH_SIZE
	`STENCIL_SIZE
	`SAMPLE_BUFFERS
	`SAMPLES
	`RENDER_METHOD
	`FLOAT_COLOR
	`FLOAT_DEPTH
	`SINGLE_BUFFER
	`SWAP_METHOD
	`COMPATIBLE_DISPLAY
	`UPDATE_DISPLAY_REGION
	`VSYNC
	`MAX_BITMAP_SIZE
	`SUPPORT_NPOT_BITMAP
	`CAN_DRAW_INTO_BITMAP
	`SUPPORT_SEPARATE_ALPHA
	`AUTO_CONVERT_BITMAPS
	`SUPPORTED_ORIENTATIONS
	`OPENGL_MAJOR_VERSION
	`OPENGL_MINOR_VERSION
	`DISPLAY_OPTIONS_COUNT
;;
const DONTCARE = 0
const REQUIRE = 1
const SUGGEST = 2
type DISPLAY_ORIENTATION = union
	`DISPLAY_ORIENTATION_UNKNOWN
	`DISPLAY_ORIENTATION_0_DEGREES
	`DISPLAY_ORIENTATION_90_DEGREES
	`DISPLAY_ORIENTATION_180_DEGREES
	`DISPLAY_ORIENTATION_270_DEGREES
	`DISPLAY_ORIENTATION_PORTRAIT
	`DISPLAY_ORIENTATION_LANDSCAPE
	`DISPLAY_ORIENTATION_ALL
	`DISPLAY_ORIENTATION_FACE_UP
	`DISPLAY_ORIENTATION_FACE_DOWN
;;
const _PRIM_MAX_USER_ATTR = 10
type DISPLAY = struct
;;
extern const set_new_display_refresh_rate : (refresh_rate: int -> void)
extern const set_new_display_flags : (flags: int -> void)
extern const get_new_display_refresh_rate : ( -> int)
extern const get_new_display_flags : ( -> int)
extern const set_new_window_title : (title: char # -> void)
extern const get_new_window_title : ( -> char #)
extern const get_display_width : (display: DISPLAY # -> int)
extern const get_display_height : (display: DISPLAY # -> int)
extern const get_display_format : (display: DISPLAY # -> int)
extern const get_display_refresh_rate : (display: DISPLAY # -> int)
extern const get_display_flags : (display: DISPLAY # -> int)
extern const get_display_orientation : (display: DISPLAY # -> int)
extern const set_display_flag : (display: DISPLAY #, flag: int, onoff: bool -> int)
extern const create_display : (w: int, h: int -> DISPLAY #)
extern const destroy_display : (display: DISPLAY # -> void)
extern const get_current_display : ( -> DISPLAY #)
extern const set_target_bitmap : (bitmap: BITMAP # -> void)
extern const set_target_backbuffer : (display: DISPLAY # -> void)
extern const get_backbuffer : (display: DISPLAY # -> BITMAP #)
extern const get_target_bitmap : ( -> BITMAP #)
extern const acknowledge_resize : (display: DISPLAY # -> int)
extern const resize_display : (display: DISPLAY #, width: int, height: int -> int)
extern const flip_display : ( -> void)
extern const update_display_region : (x: int, y: int, width: int, height: int -> void)
extern const is_compatible_bitmap : (bitmap: BITMAP # -> int)
extern const wait_for_vsync : ( -> int)
extern const get_display_event_source : (display: DISPLAY # -> EVENT_SOURCE #)
extern const set_display_icon : (display: DISPLAY #, icon: BITMAP # -> void)
extern const set_display_icons : (display: DISPLAY #, num_icons: int, icons: BITMAP #[:] -> void)
extern const get_new_display_adapter : ( -> int)
extern const set_new_display_adapter : (adapter: int -> void)
extern const set_new_window_position : (x: int, y: int -> void)
extern const get_new_window_position : (x: int #, y: int # -> void)
extern const set_window_position : (display: DISPLAY #, x: int, y: int -> void)
extern const get_window_position : (display: DISPLAY #, x: int #, y: int # -> void)
extern const set_window_constraints : (display: DISPLAY #, min_w: int, min_h: int, max_w: int, max_h: int -> int)
extern const get_window_constraints : (display: DISPLAY #, min_w: int #, min_h: int #, max_w: int #, max_h: int # -> int)
extern const apply_window_constraints : (display: DISPLAY #, onoff: bool -> void)
extern const set_window_title : (display: DISPLAY #, title: char # -> void)
extern const set_new_display_option : (option: int, value: int, importance: int -> void)
extern const get_new_display_option : (option: int, importance: int # -> int)
extern const reset_new_display_options : ( -> void)
extern const set_display_option : (display: DISPLAY #, option: int, value: int -> void)
extern const get_display_option : (display: DISPLAY #, option: int -> int)
extern const hold_bitmap_drawing : (hold: bool -> void)
extern const is_bitmap_drawing_held : ( -> int)
extern const acknowledge_drawing_halt : (display: DISPLAY # -> void)
extern const acknowledge_drawing_resume : (display: DISPLAY # -> void)
extern const get_clipboard_text : (display: DISPLAY # -> char #)
extern const set_clipboard_text : (display: DISPLAY #, text: char # -> int)
extern const clipboard_has_text : (display: DISPLAY # -> int)
type CONFIG = struct
;;
type CONFIG_SECTION = struct
;;
type CONFIG_ENTRY = struct
;;
extern const create_config : ( -> CONFIG #)
extern const add_config_section : (config: CONFIG #, name: char # -> void)
extern const set_config_value : (config: CONFIG #, section: char #, key: char #, value: char # -> void)
extern const add_config_comment : (config: CONFIG #, section: char #, comment: char # -> void)
extern const get_config_value : (config: ALLEGRO_CONFIG #, section: char #, key: char # -> char #)
extern const load_config_file : (filename: char # -> CONFIG #)
extern const load_config_file_f : (filename: FILE # -> CONFIG #)
extern const save_config_file : (filename: char #, config: ALLEGRO_CONFIG # -> int)
extern const save_config_file_f : (file: FILE #, config: ALLEGRO_CONFIG # -> int)
extern const merge_config_into : (master: CONFIG #, add: ALLEGRO_CONFIG # -> void)
extern const merge_config : (cfg1: ALLEGRO_CONFIG #, cfg2: ALLEGRO_CONFIG # -> CONFIG #)
extern const destroy_config : (config: CONFIG # -> void)
extern const remove_config_section : (config: CONFIG #, section: char # -> int)
extern const remove_config_key : (config: CONFIG #, section: char #, key: char # -> int)
extern const get_first_config_section : (config: ALLEGRO_CONFIG #, iterator: CONFIG_SECTION # # -> char #)
extern const get_next_config_section : (iterator: CONFIG_SECTION # # -> char #)
extern const get_first_config_entry : (config: ALLEGRO_CONFIG #, section: char #, iterator: CONFIG_ENTRY # # -> char #)
extern const get_next_config_entry : (iterator: CONFIG_ENTRY # # -> char #)
extern const get_cpu_count : ( -> int)
extern const get_ram_size : ( -> int)
extern const register_assert_handler : (handler: (expr: char #, file: char #, line: int, func: char # -> void) -> void)
extern const register_trace_handler : (handler: (arg0: char # -> void) -> void)
extern const clear_to_color : (color: COLOR -> void)
extern const clear_depth_buffer : (x: float -> void)
extern const draw_pixel : (x: float, y: float, color: COLOR -> void)
extern const get_errno : ( -> int)
extern const set_errno : (errnum: int -> void)
type fixed = int32_t
var fixtorad_r : al_fixed
var radtofix_r : al_fixed
extern const fixsqrt : (x: fixed -> fixed)
extern const fixhypot : (x: fixed, y: fixed -> fixed)
extern const fixatan : (x: fixed -> fixed)
extern const fixatan2 : (y: fixed, x: fixed -> fixed)
type FS_ENTRY = struct
;;
type FILE_MODE = union
	`FILEMODE_READ
	`FILEMODE_WRITE
	`FILEMODE_EXECUTE
	`FILEMODE_HIDDEN
	`FILEMODE_ISFILE
	`FILEMODE_ISDIR
;;
type FS_INTERFACE = struct
;;
extern const create_fs_entry : (path: char # -> FS_ENTRY #)
extern const destroy_fs_entry : (e: FS_ENTRY # -> void)
extern const get_fs_entry_name : (e: FS_ENTRY # -> char #)
extern const update_fs_entry : (e: FS_ENTRY # -> int)
extern const get_fs_entry_mode : (e: FS_ENTRY # -> uint32_t)
extern const get_fs_entry_atime : (e: FS_ENTRY # -> time_t)
extern const get_fs_entry_mtime : (e: FS_ENTRY # -> time_t)
extern const get_fs_entry_ctime : (e: FS_ENTRY # -> time_t)
extern const get_fs_entry_size : (e: FS_ENTRY # -> off_t)
extern const fs_entry_exists : (e: FS_ENTRY # -> int)
extern const remove_fs_entry : (e: FS_ENTRY # -> int)
extern const open_directory : (e: FS_ENTRY # -> int)
extern const read_directory : (e: FS_ENTRY # -> FS_ENTRY #)
extern const close_directory : (e: FS_ENTRY # -> int)
extern const filename_exists : (path: char # -> int)
extern const remove_filename : (path: char # -> int)
extern const get_current_directory : ( -> char #)
extern const change_directory : (path: char # -> int)
extern const make_directory : (path: char # -> int)
extern const open_fs_entry : (e: FS_ENTRY #, mode: char # -> FILE #)
type FOR_EACH_FS_ENTRY_RESULT = union
	`FOR_EACH_FS_ENTRY_ERROR
	`FOR_EACH_FS_ENTRY_OK
	`FOR_EACH_FS_ENTRY_SKIP
	`FOR_EACH_FS_ENTRY_STOP
;;
extern const for_each_fs_entry : (dir: FS_ENTRY #, callback: (entry: FS_ENTRY #, extra: void # -> int), extra: void # -> int)
extern const get_fs_interface : ( -> ALLEGRO_FS_INTERFACE #)
extern const set_fs_interface : (vtable: ALLEGRO_FS_INTERFACE # -> void)
extern const set_standard_fs_interface : ( -> void)
type DISPLAY_MODE = struct
;;
extern const get_num_display_modes : ( -> int)
extern const get_display_mode : (index: int, mode: DISPLAY_MODE # -> DISPLAY_MODE #)
type JOYSTICK = struct
;;
type JOYSTICK_STATE = struct
;;
type JOYFLAGS = union
	`JOYFLAG_DIGITAL
	`JOYFLAG_ANALOGUE
;;
extern const install_joystick : ( -> int)
extern const uninstall_joystick : ( -> void)
extern const is_joystick_installed : ( -> int)
extern const reconfigure_joysticks : ( -> int)
extern const get_num_joysticks : ( -> int)
extern const get_joystick : (joyn: int -> JOYSTICK #)
extern const release_joystick : (arg0: JOYSTICK # -> void)
extern const get_joystick_active : (arg0: JOYSTICK # -> int)
extern const get_joystick_name : (arg0: JOYSTICK # -> char #)
extern const get_joystick_num_sticks : (arg0: JOYSTICK # -> int)
extern const get_joystick_stick_flags : (arg0: JOYSTICK #, stick: int -> int)
extern const get_joystick_stick_name : (arg0: JOYSTICK #, stick: int -> char #)
extern const get_joystick_num_axes : (arg0: JOYSTICK #, stick: int -> int)
extern const get_joystick_axis_name : (arg0: JOYSTICK #, stick: int, axis: int -> char #)
extern const get_joystick_num_buttons : (arg0: JOYSTICK # -> int)
extern const get_joystick_button_name : (arg0: JOYSTICK #, buttonn: int -> char #)
extern const get_joystick_state : (arg0: JOYSTICK #, ret_state: JOYSTICK_STATE # -> void)
extern const get_joystick_event_source : ( -> EVENT_SOURCE #)
const KEY_A = 1
const KEY_B = 2
const KEY_C = 3
const KEY_D = 4
const KEY_E = 5
const KEY_F = 6
const KEY_G = 7
const KEY_H = 8
const KEY_I = 9
const KEY_J = 10
const KEY_K = 11
const KEY_L = 12
const KEY_M = 13
const KEY_N = 14
const KEY_O = 15
const KEY_P = 16
const KEY_Q = 17
const KEY_R = 18
const KEY_S = 19
const KEY_T = 20
const KEY_U = 21
const KEY_V = 22
const KEY_W = 23
const KEY_X = 24
const KEY_Y = 25
const KEY_Z = 26
const KEY_0 = 27
const KEY_1 = 28
const KEY_2 = 29
const KEY_3 = 30
const KEY_4 = 31
const KEY_5 = 32
const KEY_6 = 33
const KEY_7 = 34
const KEY_8 = 35
const KEY_9 = 36
const KEY_PAD_0 = 37
const KEY_PAD_1 = 38
const KEY_PAD_2 = 39
const KEY_PAD_3 = 40
const KEY_PAD_4 = 41
const KEY_PAD_5 = 42
const KEY_PAD_6 = 43
const KEY_PAD_7 = 44
const KEY_PAD_8 = 45
const KEY_PAD_9 = 46
const KEY_F1 = 47
const KEY_F2 = 48
const KEY_F3 = 49
const KEY_F4 = 50
const KEY_F5 = 51
const KEY_F6 = 52
const KEY_F7 = 53
const KEY_F8 = 54
const KEY_F9 = 55
const KEY_F10 = 56
const KEY_F11 = 57
const KEY_F12 = 58
const KEY_ESCAPE = 59
const KEY_TILDE = 60
const KEY_MINUS = 61
const KEY_EQUALS = 62
const KEY_BACKSPACE = 63
const KEY_TAB = 64
const KEY_OPENBRACE = 65
const KEY_CLOSEBRACE = 66
const KEY_ENTER = 67
const KEY_SEMICOLON = 68
const KEY_QUOTE = 69
const KEY_BACKSLASH = 70
const KEY_BACKSLASH2 = 71
const KEY_COMMA = 72
const KEY_FULLSTOP = 73
const KEY_SLASH = 74
const KEY_SPACE = 75
const KEY_INSERT = 76
const KEY_DELETE = 77
const KEY_HOME = 78
const KEY_END = 79
const KEY_PGUP = 80
const KEY_PGDN = 81
const KEY_LEFT = 82
const KEY_RIGHT = 83
const KEY_UP = 84
const KEY_DOWN = 85
const KEY_PAD_SLASH = 86
const KEY_PAD_ASTERISK = 87
const KEY_PAD_MINUS = 88
const KEY_PAD_PLUS = 89
const KEY_PAD_DELETE = 90
const KEY_PAD_ENTER = 91
const KEY_PRINTSCREEN = 92
const KEY_PAUSE = 93
const KEY_ABNT_C1 = 94
const KEY_YEN = 95
const KEY_KANA = 96
const KEY_CONVERT = 97
const KEY_NOCONVERT = 98
const KEY_AT = 99
const KEY_CIRCUMFLEX = 100
const KEY_COLON2 = 101
const KEY_KANJI = 102
const KEY_PAD_EQUALS = 103
const KEY_BACKQUOTE = 104
const KEY_SEMICOLON2 = 105
const KEY_COMMAND = 106
const KEY_BACK = 107
const KEY_VOLUME_UP = 108
const KEY_VOLUME_DOWN = 109
const KEY_SEARCH = 110
const KEY_DPAD_CENTER = 111
const KEY_BUTTON_X = 112
const KEY_BUTTON_Y = 113
const KEY_DPAD_UP = 114
const KEY_DPAD_DOWN = 115
const KEY_DPAD_LEFT = 116
const KEY_DPAD_RIGHT = 117
const KEY_SELECT = 118
const KEY_START = 119
const KEY_BUTTON_L1 = 120
const KEY_BUTTON_R1 = 121
const KEY_BUTTON_L2 = 122
const KEY_BUTTON_R2 = 123
const KEY_BUTTON_A = 124
const KEY_BUTTON_B = 125
const KEY_THUMBL = 126
const KEY_THUMBR = 127
const KEY_UNKNOWN = 128
const KEY_MODIFIERS = 215
const KEY_LSHIFT = 215
const KEY_RSHIFT = 216
const KEY_LCTRL = 217
const KEY_RCTRL = 218
const KEY_ALT = 219
const KEY_ALTGR = 220
const KEY_LWIN = 221
const KEY_RWIN = 222
const KEY_MENU = 223
const KEY_SCROLLLOCK = 224
const KEY_NUMLOCK = 225
const KEY_CAPSLOCK = 226
const KEY_MAX = 227
const KEYMOD_SHIFT = 1
const KEYMOD_CTRL = 2
const KEYMOD_ALT = 4
const KEYMOD_LWIN = 8
const KEYMOD_RWIN = 16
const KEYMOD_MENU = 32
const KEYMOD_ALTGR = 64
const KEYMOD_COMMAND = 128
const KEYMOD_SCROLLLOCK = 256
const KEYMOD_NUMLOCK = 512
const KEYMOD_CAPSLOCK = 1024
const KEYMOD_INALTSEQ = 2048
const KEYMOD_ACCENT1 = 4096
const KEYMOD_ACCENT2 = 8192
const KEYMOD_ACCENT3 = 16384
const KEYMOD_ACCENT4 = 32768
type KEYBOARD = struct
;;
type KEYBOARD_STATE = struct
;;
extern const is_keyboard_installed : ( -> int)
extern const install_keyboard : ( -> int)
extern const uninstall_keyboard : ( -> void)
extern const set_keyboard_leds : (leds: int -> int)
extern const keycode_to_name : (keycode: int -> char #)
extern const get_keyboard_state : (ret_state: KEYBOARD_STATE # -> void)
extern const key_down : (arg0: ALLEGRO_KEYBOARD_STATE #, keycode: int -> int)
extern const get_keyboard_event_source : ( -> EVENT_SOURCE #)
type MOUSE = struct
;;
type MOUSE_STATE = struct
;;
extern const is_mouse_installed : ( -> int)
extern const install_mouse : ( -> int)
extern const uninstall_mouse : ( -> void)
extern const get_mouse_num_buttons : ( -> uint)
extern const get_mouse_num_axes : ( -> uint)
extern const set_mouse_xy : (display: ALLEGRO_DISPLAY #, x: int, y: int -> int)
extern const set_mouse_z : (z: int -> int)
extern const set_mouse_w : (w: int -> int)
extern const set_mouse_axis : (axis: int, value: int -> int)
extern const get_mouse_state : (ret_state: MOUSE_STATE # -> void)
extern const mouse_button_down : (state: ALLEGRO_MOUSE_STATE #, button: int -> int)
extern const get_mouse_state_axis : (state: ALLEGRO_MOUSE_STATE #, axis: int -> int)
extern const get_mouse_cursor_position : (ret_x: int #, ret_y: int # -> int)
extern const grab_mouse : (display: ALLEGRO_DISPLAY # -> int)
extern const ungrab_mouse : ( -> int)
extern const set_mouse_wheel_precision : (precision: int -> void)
extern const get_mouse_wheel_precision : ( -> int)
extern const get_mouse_event_source : ( -> EVENT_SOURCE #)
type TOUCH_INPUT = struct
;;
type TOUCH_INPUT_STATE = struct
;;
type TOUCH_STATE = struct
;;
extern const is_touch_input_installed : ( -> int)
extern const install_touch_input : ( -> int)
extern const uninstall_touch_input : ( -> void)
extern const get_touch_input_state : (ret_state: TOUCH_INPUT_STATE # -> void)
extern const get_touch_input_event_source : ( -> EVENT_SOURCE #)
type MEMORY_INTERFACE = struct
;;
extern const set_memory_interface : (iface: MEMORY_INTERFACE # -> void)
extern const malloc_with_context : (n: int, line: int, file: char #, func: char # -> void #)
extern const free_with_context : (ptr: void #, line: int, file: char #, func: char # -> void)
extern const realloc_with_context : (ptr: void #, n: int, line: int, file: char #, func: char # -> void #)
extern const calloc_with_context : (count: int, n: int, line: int, file: char #, func: char # -> void #)
type MONITOR_INFO = struct
;;
const DEFAULT_DISPLAY_ADAPTER = -1
extern const get_num_video_adapters : ( -> int)
extern const get_monitor_info : (adapter: int, info: MONITOR_INFO # -> int)
type MOUSE_CURSOR = struct
;;
type SYSTEM_MOUSE_CURSOR = union
	`SYSTEM_MOUSE_CURSOR_NONE
	`SYSTEM_MOUSE_CURSOR_DEFAULT
	`SYSTEM_MOUSE_CURSOR_ARROW
	`SYSTEM_MOUSE_CURSOR_BUSY
	`SYSTEM_MOUSE_CURSOR_QUESTION
	`SYSTEM_MOUSE_CURSOR_EDIT
	`SYSTEM_MOUSE_CURSOR_MOVE
	`SYSTEM_MOUSE_CURSOR_RESIZE_N
	`SYSTEM_MOUSE_CURSOR_RESIZE_W
	`SYSTEM_MOUSE_CURSOR_RESIZE_S
	`SYSTEM_MOUSE_CURSOR_RESIZE_E
	`SYSTEM_MOUSE_CURSOR_RESIZE_NW
	`SYSTEM_MOUSE_CURSOR_RESIZE_SW
	`SYSTEM_MOUSE_CURSOR_RESIZE_SE
	`SYSTEM_MOUSE_CURSOR_RESIZE_NE
	`SYSTEM_MOUSE_CURSOR_PROGRESS
	`SYSTEM_MOUSE_CURSOR_PRECISION
	`SYSTEM_MOUSE_CURSOR_LINK
	`SYSTEM_MOUSE_CURSOR_ALT_SELECT
	`SYSTEM_MOUSE_CURSOR_UNAVAILABLE
	`NUM_SYSTEM_MOUSE_CURSORS
;;
extern const create_mouse_cursor : (sprite: ALLEGRO_BITMAP #, xfocus: int, yfocus: int -> MOUSE_CURSOR #)
extern const destroy_mouse_cursor : (arg0: MOUSE_CURSOR # -> void)
extern const set_mouse_cursor : (display: ALLEGRO_DISPLAY #, cursor: MOUSE_CURSOR # -> int)
extern const set_system_mouse_cursor : (display: ALLEGRO_DISPLAY #, cursor_id: SYSTEM_MOUSE_CURSOR -> int)
extern const show_mouse_cursor : (display: ALLEGRO_DISPLAY # -> int)
extern const hide_mouse_cursor : (display: ALLEGRO_DISPLAY # -> int)
type RENDER_STATE = union
	`ALPHA_TEST
	`WRITE_MASK
	`DEPTH_TEST
	`DEPTH_FUNCTION
	`ALPHA_FUNCTION
	`ALPHA_TEST_VALUE
;;
type RENDER_FUNCTION = union
	`RENDER_NEVER
	`RENDER_ALWAYS
	`RENDER_LESS
	`RENDER_EQUAL
	`RENDER_LESS_EQUAL
	`RENDER_GREATER
	`RENDER_NOT_EQUAL
	`RENDER_GREATER_EQUAL
;;
type WRITE_MASK_FLAGS = union
	`MASK_RED
	`MASK_GREEN
	`MASK_BLUE
	`MASK_ALPHA
	`MASK_DEPTH
	`MASK_RGB
	`MASK_RGBA
;;
extern const set_render_state : (state: RENDER_STATE, value: int -> void)
type TRANSFORM = struct
;;
extern const use_transform : (trans: ALLEGRO_TRANSFORM # -> void)
extern const use_projection_transform : (trans: ALLEGRO_TRANSFORM # -> void)
extern const copy_transform : (dest: TRANSFORM #, src: ALLEGRO_TRANSFORM # -> void)
extern const identity_transform : (trans: TRANSFORM # -> void)
extern const build_transform : (trans: TRANSFORM #, x: float, y: float, sx: float, sy: float, theta: float -> void)
extern const build_camera_transform : (trans: TRANSFORM #, position_x: float, position_y: float, position_z: float, look_x: float, look_y: float, look_z: float, up_x: float, up_y: float, up_z: float -> void)
extern const translate_transform : (trans: TRANSFORM #, x: float, y: float -> void)
extern const translate_transform_3d : (trans: TRANSFORM #, x: float, y: float, z: float -> void)
extern const rotate_transform : (trans: TRANSFORM #, theta: float -> void)
extern const rotate_transform_3d : (trans: TRANSFORM #, x: float, y: float, z: float, angle: float -> void)
extern const scale_transform : (trans: TRANSFORM #, sx: float, sy: float -> void)
extern const scale_transform_3d : (trans: TRANSFORM #, sx: float, sy: float, sz: float -> void)
extern const transform_coordinates : (trans: ALLEGRO_TRANSFORM #, x: float #, y: float # -> void)
extern const transform_coordinates_3d : (trans: ALLEGRO_TRANSFORM #, x: float #, y: float #, z: float # -> void)
extern const transform_coordinates_4d : (trans: ALLEGRO_TRANSFORM #, x: float #, y: float #, z: float #, w: float # -> void)
extern const transform_coordinates_3d_projective : (trans: ALLEGRO_TRANSFORM #, x: float #, y: float #, z: float # -> void)
extern const compose_transform : (trans: TRANSFORM #, other: ALLEGRO_TRANSFORM # -> void)
extern const get_current_transform : ( -> ALLEGRO_TRANSFORM #)
extern const get_current_inverse_transform : ( -> ALLEGRO_TRANSFORM #)
extern const get_current_projection_transform : ( -> ALLEGRO_TRANSFORM #)
extern const invert_transform : (trans: TRANSFORM # -> void)
extern const check_inverse : (trans: ALLEGRO_TRANSFORM #, tol: float -> int)
extern const orthographic_transform : (trans: TRANSFORM #, left: float, top: float, n: float, right: float, bottom: float, f: float -> void)
extern const perspective_transform : (trans: TRANSFORM #, left: float, top: float, n: float, right: float, bottom: float, f: float -> void)
extern const horizontal_shear_transform : (trans: TRANSFORM #, theta: float -> void)
extern const vertical_shear_transform : (trans: TRANSFORM #, theta: float -> void)
type SHADER = struct
;;
type SHADER_TYPE = union
	`VERTEX_SHADER
	`PIXEL_SHADER
;;
type SHADER_PLATFORM = union
	`SHADER_AUTO
	`SHADER_GLSL
	`SHADER_HLSL
;;
extern const create_shader : (platform: SHADER_PLATFORM -> SHADER #)
extern const attach_shader_source : (shader: SHADER #, type: SHADER_TYPE, source: char # -> int)
extern const attach_shader_source_file : (shader: SHADER #, type: SHADER_TYPE, filename: char # -> int)
extern const build_shader : (shader: SHADER # -> int)
extern const get_shader_log : (shader: SHADER # -> char #)
extern const get_shader_platform : (shader: SHADER # -> SHADER_PLATFORM)
extern const use_shader : (shader: SHADER # -> int)
extern const destroy_shader : (shader: SHADER # -> void)
extern const set_shader_sampler : (name: char #, bitmap: BITMAP #, unit: int -> int)
extern const set_shader_matrix : (name: char #, matrix: ALLEGRO_TRANSFORM # -> int)
extern const set_shader_int : (name: char #, i: int -> int)
extern const set_shader_float : (name: char #, f: float -> int)
extern const set_shader_int_vector : (name: char #, num_components: int, i: int #, num_elems: int -> int)
extern const set_shader_float_vector : (name: char #, num_components: int, f: float #, num_elems: int -> int)
extern const set_shader_bool : (name: char #, b: bool -> int)
extern const get_default_shader_source : (platform: SHADER_PLATFORM, type: SHADER_TYPE -> char #)
type SYSTEM = struct
;;
extern const install_system : (version: int, atexit_ptr: (arg0: ( -> void) -> int) -> int)
extern const uninstall_system : ( -> void)
extern const is_system_installed : ( -> int)
extern const get_system_driver : ( -> SYSTEM #)
extern const get_system_config : ( -> CONFIG #)
const RESOURCES_PATH = 0
const TEMP_PATH = 1
const USER_DATA_PATH = 2
const USER_HOME_PATH = 3
const USER_SETTINGS_PATH = 4
const USER_DOCUMENTS_PATH = 5
const EXENAME_PATH = 6
const LAST_PATH = 7
extern const get_standard_path : (id: int -> PATH #)
extern const set_exe_name : (path: char # -> void)
extern const set_org_name : (org_name: char # -> void)
extern const set_app_name : (app_name: char # -> void)
extern const get_org_name : ( -> char #)
extern const get_app_name : ( -> char #)
extern const inhibit_screensaver : (inhibit: bool -> int)
type THREAD = struct
;;
type MUTEX = struct
;;
type COND = struct
;;
extern const create_thread : (proc: (thread: THREAD #, arg: void # -> void #), arg: void # -> THREAD #)
extern const start_thread : (outer: THREAD # -> void)
extern const join_thread : (outer: THREAD #, ret_value: void # # -> void)
extern const set_thread_should_stop : (outer: THREAD # -> void)
extern const get_thread_should_stop : (outer: THREAD # -> int)
extern const destroy_thread : (thread: THREAD # -> void)
extern const run_detached_thread : (proc: (arg: void # -> void #), arg: void # -> void)
extern const create_mutex : ( -> MUTEX #)
extern const create_mutex_recursive : ( -> MUTEX #)
extern const lock_mutex : (mutex: MUTEX # -> void)
extern const unlock_mutex : (mutex: MUTEX # -> void)
extern const destroy_mutex : (mutex: MUTEX # -> void)
extern const create_cond : ( -> COND #)
extern const destroy_cond : (cond: COND # -> void)
extern const wait_cond : (cond: COND #, mutex: MUTEX # -> void)
extern const wait_cond_until : (cond: COND #, mutex: MUTEX #, timeout: ALLEGRO_TIMEOUT # -> int)
extern const broadcast_cond : (cond: COND # -> void)
extern const signal_cond : (cond: COND # -> void)
type TIMER = struct
;;
extern const create_timer : (speed_secs: double -> TIMER #)
extern const destroy_timer : (timer: TIMER # -> void)
extern const start_timer : (timer: TIMER # -> void)
extern const stop_timer : (timer: TIMER # -> void)
extern const resume_timer : (timer: TIMER # -> void)
extern const get_timer_started : (timer: ALLEGRO_TIMER # -> int)
extern const get_timer_speed : (timer: ALLEGRO_TIMER # -> double)
extern const set_timer_speed : (timer: TIMER #, speed_secs: double -> void)
extern const get_timer_count : (timer: ALLEGRO_TIMER # -> int64_t)
extern const set_timer_count : (timer: TIMER #, count: int64_t -> void)
extern const add_timer_count : (timer: TIMER #, diff: int64_t -> void)
extern const get_timer_event_source : (timer: TIMER # -> EVENT_SOURCE #)
type STATE_FLAGS = union
	`STATE_NEW_DISPLAY_PARAMETERS
	`STATE_NEW_BITMAP_PARAMETERS
	`STATE_DISPLAY
	`STATE_TARGET_BITMAP
	`STATE_BLENDER
	`STATE_NEW_FILE_INTERFACE
	`STATE_TRANSFORM
	`STATE_PROJECTION_TRANSFORM
	`STATE_BITMAP
	`STATE_ALL
;;
type STATE = struct
;;
extern const store_state : (state: STATE #, flags: int -> void)
extern const restore_state : (state: ALLEGRO_STATE # -> void)
